#include <iostream>
#include <vector>
#include "fir_filter.h"

/*
 * This program demonstrates the use of a FIR3 filter with a dynamically allocated
 * input signal. A pseudo-noise signal of length 256 is generated and used as the
 * input to the FIR3 filter. The FIR3 filter is defined in the "fir_filter.h" header
 * file and is applied to the pseudo-noise signal. The filtered output is then printed
 * to the console. The coefficients and initial states of the filter are hard-coded
 * and can be adjusted as per the requirements.
 *
 * The pseudo-noise signal is generated by a simple random number generation mechanism
 * where each element of the signal is either -1 or 1.
 */

 // Function to generate a pseudo-noise signal using a simple method
std::vector<word> generatePseudoNoiseSignal(size_t length) {
    std::vector<word> signal(length);
    for (size_t i = 0; i < length; i++) {
        // Simple pseudo-random number generation for input signal
        signal[i] = (rand() % 2 == 0) ? -1.0 : 1.0; // Generating -1 and 1 randomly
    }
    return signal;
}

int main() {
    fir3Vars vars;

    // Generating a pseudo-noise signal of length 256
    vars.Ain = generatePseudoNoiseSignal(256);

    vars.Aout.resize(vars.Ain.size());  // Resizing the output array to match the input array size

    // Initialize the filter coefficients and states
    vars.b0 = 0.5;
    vars.b1 = 0.25;
    vars.b2 = 0.25;
    vars.s1 = 0;
    vars.s2 = 0;

    fir3(&vars);

    // Print the output
    for (size_t i = 0; i < vars.Aout.size(); i++) {
        std::cout << vars.Aout[i] << std::endl;
    }

    return 0;
}
